// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html

// #include "nrf5340_cpuapp_common-pinctrl.dtsi"
#include <zephyr/dt-bindings/pwm/pwm.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <zephyr/dt-bindings/spi/spi.h>
#include <zephyr/dt-bindings/gpio/gpio.h>

&pinctrl {
    pwm0_default: pwm0_default {
        group1 {
            psels = <NRF_PSEL(PWM_OUT0, 0, 3)>,   // Channel 0, green line, pin 3 
                    <NRF_PSEL(PWM_OUT1, 0, 4)>,   // Channel 1, blue line, pin 4
                    <NRF_PSEL(PWM_OUT2, 0, 5)>;   // Channel 2, red line, pin 5
            nordic,invert;
        };
    };

    afe_spi_default: afe_spi_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MISO, 0, 10)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 9)>,
                    <NRF_PSEL(SPIM_SCK, 0, 8)>;
        };
    };

    afe_spi_sleep: afe_spi_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MISO, 0, 10)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 9)>,
                    <NRF_PSEL(SPIM_SCK, 0, 8)>;
            low-power-enable;
        };
    };
};

&pinctrl {
    lcd_spi_default: lcd_spi_default {
        group1 {
            psels = <NRF_PSEL(SPIM_MISO, 0, 17)>, <NRF_PSEL(SPIM_SCK, 0, 19)>;
        };

        group2 {
            psels = <NRF_PSEL(SPIM_MOSI, 0, 14)>;
            nordic,invert;
        };
    };
    lcd_spi_sleep: lcd_spi_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_MISO, 0, 17)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 14)>,
                    <NRF_PSEL(SPIM_SCK, 0, 19)>;
            low-power-enable;
        };
    };
};

/ {
    aliases {
        pwm-led0 = &fake_led;
        greenled = &green_pwm_led; // 0.03
        blueled = &blue_pwm_led; // 0.04
        redled = &red_pwm_led; // 0.05
        databutton = &button_data_en; // 1.00
        afespi = &spi0;
    };

    chosen {
        zephyr,display = &lcd;
    };

    pwmleds {
        compatible = "pwm-leds";

        // pwm0 Ch dont care
        fake_led: fake {
            pwms = <&pwm0 5 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 0
        green_pwm_led: green_pwm {
            pwms = <&pwm0 0 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 1
        blue_pwm_led: blue_pwm {
            pwms = <&pwm0 1 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 2
        red_pwm_led: red_pwm {
            pwms = <&pwm0 2 15625000 PWM_POLARITY_NORMAL>;
        };
    };
    
    buttons {
        compatible = "gpio-keys";
        button_data_en: data_en {
            gpios = <&gpio1 0 (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>;
            label = "Data Enable Button";
            zephyr,code = <INPUT_KEY_0>;
        };
    };

    zephyr,user {
        afereset-gpios = <&gpio0 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        afereset-label = "AFE Reset";
        afeindicator-gpios = <&gpio0 2 0>;
        afeindicator-label = "AFE Indicator LED";
        afedrdy-gpios = <&gpio0 12 (GPIO_ACTIVE_LOW)>;
        afedrdy-label = "AFE DRDY";
    };
};

/delete-node/ &pwm_led0;
/delete-node/ &{/pin-controller/pwm0_sleep/group1/};

lcd_spi: &spi1 {
	compatible = "nordic,nrf-spim";
	status = "okay";
	pinctrl-0 = <&lcd_spi_default>;
    pinctrl-1 = <&lcd_spi_sleep>;
	pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 15 (GPIO_ACTIVE_LOW)>;

    lcd: st7735r@0 {
        compatible = "sitronix,st7735r";
		spi-max-frequency = <20000000>;
		reg = <0>;
		// lcd-backlight-power-gpios = <&gpio1 13 GPIO_ACTIVE_HIGH>;	/* D4 */
		cmd-data-gpios = <&gpio1 14 GPIO_ACTIVE_LOW>;	/* D9 */
		reset-gpios = <&gpio1 15 GPIO_ACTIVE_LOW>;	/* D8 */
		width = <160>;
		height = <80>;
		// inversion-on;
		// rgb-is-inverted;
		x-offset = <1>;
		y-offset = <26>;
		pwctr1 = [62 02 04];
		pwctr2 = [C0];
		pwctr3 = [0D 00];
		pwctr4 = [8D 6A];
		pwctr5 = [8D EE];
		invctr = <3>;
		frmctr1 = [05 3A 3A];
		frmctr2 = [05 3A 3A];
		frmctr3 = [05 3A 3A 05 3A 3A];
		vmctr1 = <14>;
		gamctrp1 = [10 0E 02 03 0E 07 02 07 0A 12 27 37 00 0D 0E 10];
		gamctrn1 = [10 0E 03 03 0F 06 02 08 0A 13 26 36 00 0D 0E 10];
		colmod = <5>;
		madctl = <120>;
		caset = [00 01 00 a0];
		raset = [00 1a 00 69];

		// spi-max-frequency = <4000000>;
    };
};

&gpio_fwd {
    uart {
        gpios = <&gpio0 11 0>, <&gpio0 10 0>;
    };
};

&pwm0_default {
    group1 {
        psels = <NRF_PSEL(PWM_OUT2, 0, 5)>;
    };
    group2 {
        psels = <NRF_PSEL(PWM_OUT0, 1, 3)>, <NRF_PSEL(PWM_OUT1, 0, 4)>, <NRF_PSEL(PWM_OUT2, 0, 5)>;
    };
};

afe_spi: &spi4 {
	compatible = "nordic,nrf-spim";
	status = "okay";
    easydma-maxcnt-bits = <18>; // 2^18
	pinctrl-0 = <&afe_spi_default>;
	pinctrl-1 = <&afe_spi_sleep>;
	pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio1 8 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
	reg_afe_spi:  spi-dev-a@0 {
		reg = <0>;
	};
};

&i2c1_default {
    group1 {
        psels = <NRF_PSEL(TWIM_SDA, 1, 2)>;
    };
};

&i2c1_sleep {
    group1 {
        psels = <NRF_PSEL(TWIM_SDA, 1, 2)>;
    };
};
&gpio_fwd {
    uart {
        status = "disabled";
        /delete-property/ nfct-pins-as-gpios;
    };
};
&uart0 {
    status = "disabled";
};
&qspi {
    status = "disabled";
};
&gpiote {
    status = "okay";
};

&qspi_default {
    group1 {
        psels = <NRF_PSEL(QSPI_IO0, 0, 13)>,
                <NRF_PSEL(QSPI_IO3, 0, 16)>,
                <NRF_PSEL(QSPI_CSN, 0, 18)>;
    };
};

&qspi_sleep {
    group1 {
        psels = <NRF_PSEL(QSPI_IO0, 0, 13)>, <NRF_PSEL(QSPI_IO3, 0, 16)>;
    };
};

&uart0_default {
    group1 {
        psels = <NRF_PSEL(UART_TX, 0, 20)>;
    };
};

&uart0_sleep {
    group1 {
        psels = <NRF_PSEL(UART_TX, 0, 20)>, <NRF_PSEL(UART_RX, 0, 22)>, <NRF_PSEL(UART_CTS, 0, 21)>;
    };
};

&led0 {
    gpios = <&gpio1 13 0>;
};
