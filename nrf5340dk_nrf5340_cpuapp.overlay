// #include "nrf5340_cpuapp_common-pinctrl.dtsi"
#include <zephyr/dt-bindings/pwm/pwm.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

&pinctrl {
    pwm0_default: pwm0_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 3)>,   // Channel 0, green line, pin 3 
					<NRF_PSEL(PWM_OUT1, 0, 4)>,   // Channel 1, blue line, pin 4
					<NRF_PSEL(PWM_OUT2, 0, 5)>;   // Channel 2, red line, pin 5
			nordic,invert;
		};
	};
};

/ {
    aliases {
        pwm-led0 = &fake_led;
        greenled = &green_pwm_led; // 0.03
        blueled = &blue_pwm_led; // 0.04
        redled = &red_pwm_led; // 0.05
        databutton = &button_data_en; // 1.00
    };

    pwmleds {
        compatible = "pwm-leds";

        // pwm0 Ch dont care
        fake_led: fake {
            pwms = <&pwm0 5 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 0
        green_pwm_led: green_pwm {
            pwms = <&pwm0 0 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 1
        blue_pwm_led: blue_pwm {
            pwms = <&pwm0 1 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 2
        red_pwm_led: red_pwm {
            pwms = <&pwm0 2 15625000 PWM_POLARITY_NORMAL>;
        };
    };
    
    buttons {
		compatible = "gpio-keys";

		button_data_en: data_en {
			gpios = <&gpio1 0 (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>;
			label = "Data Enable Button";
			zephyr,code = <INPUT_KEY_0>;
		};
    };

    // en_bat_sens: enable-battery-sense {
    //     compatible = "regulator-fixed";
    //     regulator-name = "en_bat_sens";
    //     enable-gpios = <&gpioc 14 GPIO_ACTIVE_LOW>;
    //     regulator-boot-on;
    // };
};
/delete-node/ &pwm_led0;

&gpio_fwd {
    uart {
        gpios = <&gpio1 0 0>, <&gpio0 11 0>, <&gpio0 10 0>;
    };
};

&gpio_fwd {
    uart {
        gpios = <&gpio0 11 0>, <&gpio0 10 0>;
    };
};
&pwm0_default {
    group2 {
        psels = <NRF_PSEL(PWM_OUT0, 0, 3)>;
    };
};

&pwm0_default {
    group1 {
        psels = <NRF_PSEL(PWM_OUT1, 0, 4)>, <NRF_PSEL(PWM_OUT2, 0, 5)>;
    };
};

&pwm0_default {
    group2 {
        psels = <NRF_PSEL(PWM_OUT0, 0, 3)>, <NRF_PSEL(PWM_OUT1, 0, 4)>;
    };
};

&pwm0_default {
    group1 {
        psels = <NRF_PSEL(PWM_OUT2, 0, 5)>;
    };
};

&pwm0_default {
    group2 {
        psels = <NRF_PSEL(PWM_OUT0, 0, 3)>, <NRF_PSEL(PWM_OUT1, 0, 4)>, <NRF_PSEL(PWM_OUT2, 0, 5)>;
    };
};

&pwm0_default {
    group2 {
        psels = <NRF_PSEL(PWM_OUT0, 1, 3)>, <NRF_PSEL(PWM_OUT1, 0, 4)>, <NRF_PSEL(PWM_OUT2, 0, 5)>;
    };
};

&i2c1_default {
    group1 {
        psels = <NRF_PSEL(TWIM_SDA, 1, 2)>;
    };
};

&i2c1_sleep {
    group1 {
        psels = <NRF_PSEL(TWIM_SDA, 1, 2)>;
    };
};
