// To get started, press Ctrl+Space to bring up the completion menu and view the available nodes.

// You can also use the buttons in the sidebar to perform actions on nodes.
// Actions currently available include:

// * Enabling / disabling the node
// * Adding the bus to a bus
// * Removing the node
// * Connecting ADC channels

// For more help, browse the DeviceTree documentation at https://docs.zephyrproject.org/latest/guides/dts/index.html
// You can also visit the nRF DeviceTree extension documentation at https://nrfconnect.github.io/vscode-nrf-connect/devicetree/nrfdevicetree.html

// #include "nrf5340_cpuapp_common-pinctrl.dtsi"
#include <zephyr/dt-bindings/pwm/pwm.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <zephyr/dt-bindings/spi/spi.h>
#include <zephyr/dt-bindings/gpio/gpio.h>

&pinctrl {
    pwm0_default: pwm0_default {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 3)>,   // Channel 0, green line, pin 3 
					<NRF_PSEL(PWM_OUT1, 0, 4)>,   // Channel 1, blue line, pin 4
					<NRF_PSEL(PWM_OUT2, 0, 5)>;   // Channel 2, red line, pin 5
			nordic,invert;
		};
	};

    afe_spi_default: afe_spi_default {
		group1 {
            psels = <NRF_PSEL(SPIM_MISO, 0, 10)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 9)>,
                    <NRF_PSEL(SPIM_SCK, 0, 8)>;
        };
	};

	afe_spi_sleep: afe_spi_sleep {
		group1 {
            psels = <NRF_PSEL(SPIM_MISO, 0, 10)>,
                    <NRF_PSEL(SPIM_MOSI, 0, 9)>,
                    <NRF_PSEL(SPIM_SCK, 0, 8)>;
			low-power-enable;
		};
	};

	afe_spi_slave_default: afe_spi_slave_default {
		group1 {
			psels = <NRF_PSEL(SPIS_SCK, 0, 6)>,
					<NRF_PSEL(SPIS_MOSI, 0, 7)>,
					<NRF_PSEL(SPIS_MISO, 0, 25)>,
					<NRF_PSEL(SPIS_CSN, 0, 26)>;
		};
	};

	afe_spi_slave_sleep: afe_spi_slave_sleep {
		group1 {
			psels = <NRF_PSEL(SPIS_SCK, 0, 6)>,
					<NRF_PSEL(SPIS_MOSI, 0, 7)>,
					<NRF_PSEL(SPIS_MISO, 0, 25)>,
					<NRF_PSEL(SPIS_CSN, 0, 26)>;
			low-power-enable;
		};
	};
};

/ {
    aliases {
        pwm-led0 = &fake_led;
        greenled = &green_pwm_led; // 0.03
        blueled = &blue_pwm_led; // 0.04
        redled = &red_pwm_led; // 0.05
        databutton = &button_data_en; // 1.00
        afespi = &spi0;
    };

    pwmleds {
        compatible = "pwm-leds";

        // pwm0 Ch dont care
        fake_led: fake {
            pwms = <&pwm0 5 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 0
        green_pwm_led: green_pwm {
            pwms = <&pwm0 0 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 1
        blue_pwm_led: blue_pwm {
            pwms = <&pwm0 1 15625000 PWM_POLARITY_NORMAL>;
        };
        // pwm0 Ch 2
        red_pwm_led: red_pwm {
            pwms = <&pwm0 2 15625000 PWM_POLARITY_NORMAL>;
        };
    };
    
    buttons {
		compatible = "gpio-keys";

		button_data_en: data_en {
			gpios = <&gpio1 0 (GPIO_PULL_DOWN | GPIO_ACTIVE_HIGH)>;
			label = "Data Enable Button";
			zephyr,code = <INPUT_KEY_0>;
		};
    };

    zephyr,user {
        afereset-gpios = <&gpio0 29 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        afereset-label = "AFE Reset";
        afeindicator-gpios = <&gpio0 30 0>;
        afeindicator-label = "AFE Indicator LED";
    };
};

/delete-node/ &pwm_led0;
/delete-node/ &{/pin-controller/pwm0_sleep/group1/};

&pwm0_default {
    group1 {
        psels = <NRF_PSEL(PWM_OUT2, 0, 5)>;
    };
    group2 {
        psels = <NRF_PSEL(PWM_OUT0, 1, 3)>, <NRF_PSEL(PWM_OUT1, 0, 4)>, <NRF_PSEL(PWM_OUT2, 0, 5)>;
    };
};

afe_spi: &spi4 {
	compatible = "nordic,nrf-spim";
	status = "okay";
	pinctrl-0 = <&afe_spi_default>;
	pinctrl-1 = <&afe_spi_sleep>;
	pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio1 8 (GPIO_ACTIVE_LOW)>;
	reg_afe_spi:  spi-dev-a@0 {
		reg = <0>;
	};
};

afe_spi_slave: &spi3 {
	compatible = "nordic,nrf-spis";
	status = "okay";
	pinctrl-0 = <&afe_spi_slave_default>;
	pinctrl-1 = <&afe_spi_slave_sleep>;
	pinctrl-names = "default", "sleep";
	def-char = <0x00>;
};


&i2c1_default {
    group1 {
        psels = <NRF_PSEL(TWIM_SDA, 1, 2)>;
    };
};

&i2c1_sleep {
    group1 {
        psels = <NRF_PSEL(TWIM_SDA, 1, 2)>;
    };
};
&gpio_fwd {
    uart {
        status = "disabled";
        /delete-property/ nfct-pins-as-gpios;
    };
};
&uart0 {
    status = "disabled";
};
&qspi {
    status = "disabled";
};
&gpiote {
    status = "okay";
};